// Удивительно, но факт — условные конструкции можно реализовать самостоятельно с использованием одних лишь каррированных функций.

// logic.js
// В этой практике мы реализуем упрощённую версию, имитирующую работу условной конструкции if.

// Экспортируйте тройку True, False, If, используя только функции, внутри которых только функции ;) То есть нельзя пользоваться встроенными в язык if, а также true и false. Сами функции должны быть каррированы.

// Пример использования:
// import { If, True, False } from './logic';

// If(True)('one')('two');  // one
// If(False)('one')('two'); // two
// Подсказки
// Общая схема работы функций такова:

// If(func)('one')('two'); // ?
// То есть, в итоге должно вернуться то или иное значение, в зависимости от того, какая функция передана на вход If.

// Если функции If была передана True, то выражение ниже вернёт значение аргумента первого вызова (one):

// const ConditionFunction = If(True);
// ConditionFunction('one')('two'); // one

// Если функции If была передана False, то выражение ниже вернёт значение аргумента второго вызова (two):

// const ConditionFunction = If(False);
// ConditionFunction('one')('two'); // two


// -------------------------------------------------------------- мое решение
const If = (foo) => (one) => (two) => foo(one)(two);

const True = (one) => (two) => one; 

const False = (one) => (two) => two;

export {If, True, False};

console.log(If(False)(1)(2));
// -------------------------------------------------------------- мое решение


// --------------------------------------------------------------  решение учителя
// BEGIN
export const True = x => () => x;
export const False = () => y => y;

export const If = f => f;
// END
// --------------------------------------------------------------  решение учителя



// задача 
// Реализуйте и экспортируйте по умолчанию каррированую версию функции, которая принимает на вход три строки
//  и возвращает новую строчку составленную из трех входных.

// // исходная версия
// concat('a', 'bc', 'f'); // => abcf

// // каррированая версия
// concat('a')('bc')('f'); // => abcf


// -------------------------------------------------------------- мое решение
const concat = (a = '') => (b = '') => (c = '') => a + b + c;

export default concat;

console.log(concat()()());
// -------------------------------------------------------------- мое решение


// --------------------------------------------------------------  решение учителя
// BEGIN
export default str1 => str2 => str3 => `${str1}${str2}${str3}`;
// END
// --------------------------------------------------------------  решение учителя